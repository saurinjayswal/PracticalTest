// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticalTest.Context;

#nullable disable

namespace PracticalTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240619102428_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PracticalTest.Models.ApplicationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasicDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("EducationDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalExperiencesId")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperiencesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicDetailsId")
                        .IsUnique();

                    b.HasIndex("EducationDetailsId");

                    b.HasIndex("LanguagesId");

                    b.HasIndex("PreferenceId");

                    b.HasIndex("TechnicalExperiencesId");

                    b.HasIndex("WorkExperiencesId");

                    b.ToTable("applicationForms");
                });

            modelBuilder.Entity("PracticalTest.Models.BasicDetails", b =>
                {
                    b.Property<int>("BasicDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasicDetailsId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BasicDetailsId");

                    b.ToTable("basicDetails");
                });

            modelBuilder.Entity("PracticalTest.Models.Education", b =>
                {
                    b.Property<int>("EducationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationDetailsId"), 1L, 1);

                    b.Property<string>("BoardUniversity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CGPAOrPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("EducationDetailsId");

                    b.ToTable("educations");
                });

            modelBuilder.Entity("PracticalTest.Models.Experience", b =>
                {
                    b.Property<int>("WorkExperiencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperiencesId"), 1L, 1);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkExperiencesId");

                    b.ToTable("experiences");
                });

            modelBuilder.Entity("PracticalTest.Models.LanguageDetails", b =>
                {
                    b.Property<int>("LanguagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguagesId"), 1L, 1);

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguagesId");

                    b.ToTable("LanguageDetails");
                });

            modelBuilder.Entity("PracticalTest.Models.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"), 1L, 1);

                    b.Property<string>("CurrentCTC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedCTC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoticePeriod")
                        .HasColumnType("int");

                    b.Property<string>("PreferredLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreferenceId");

                    b.ToTable("Preference");
                });

            modelBuilder.Entity("PracticalTest.Models.TechExpertise", b =>
                {
                    b.Property<int>("TechnicalExperiencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicalExperiencesId"), 1L, 1);

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicalExperiencesId");

                    b.ToTable("techExpertises");
                });

            modelBuilder.Entity("PracticalTest.Models.ApplicationForm", b =>
                {
                    b.HasOne("PracticalTest.Models.BasicDetails", "BasicDetails")
                        .WithOne()
                        .HasForeignKey("PracticalTest.Models.ApplicationForm", "BasicDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalTest.Models.Education", "EducationDetails")
                        .WithMany()
                        .HasForeignKey("EducationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalTest.Models.LanguageDetails", "KnownLanguages")
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalTest.Models.Preference", "Preference")
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalTest.Models.TechExpertise", "TechnicalExperiences")
                        .WithMany()
                        .HasForeignKey("TechnicalExperiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalTest.Models.Experience", "WorkExperiences")
                        .WithMany()
                        .HasForeignKey("WorkExperiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicDetails");

                    b.Navigation("EducationDetails");

                    b.Navigation("KnownLanguages");

                    b.Navigation("Preference");

                    b.Navigation("TechnicalExperiences");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
